import pygamefrom constants import *from collections import namedtuplepygame.init()pygame.font.init()font = pygame.font.SysFont('arial', 25)Action = namedtuple('Action', 'tack left right')def terminate():    pygame.quit()    print('Game escaped')    quit()class Game:    def __init__(self, boat, buoy, human=True, w=WIDTH, h=HEIGHT):        pygame.display.set_caption('sailit')        self.boat = boat        self.boat_pos0 = (boat.x, boat.y)        self.buoy = buoy        self.display = pygame.display.set_mode((w, h))        self.frame_iteration = 0        self.clock = pygame.time.Clock()        self.frame_iteration = 0        self.is_human = human        self.finish = False    def play_step(self, action=Action(0, 0, 0)):        self.frame_iteration += 1        for event in pygame.event.get():            if event.type == pygame.QUIT:                terminate()        if self.is_human:            pressed = pygame.key.get_pressed()            action = Action(pressed[pygame.K_t], pressed[pygame.K_LEFT], pressed[pygame.K_RIGHT])            if pressed[pygame.K_ESCAPE]:                terminate()        self._move_order(action)        if self.boat.is_arrived(self.buoy.rect.center) or self.frame_iteration > 10000:            self.finish = True            print(f'Boat {self.boat.name} has arrived at its objective')            terminate()        self._update_ui()        self.boat.step_update()        self.clock.tick(SPEED)    def _move_order(self, action: Action):        # Action is list of three booleans [tack, left, right]. only one of which can be 1, but all can be zeroes        if action.tack:            self.boat.tack()        elif action.left:            self.boat.turn(LEFT, 1)        elif action.right:            self.boat.turn(RIGHT, 1)        # if all are zeroes, do nothing, keep chilling    def _update_ui(self):        self.display.fill((0, 128, 255))        self.display.blit(self.boat.surf, self.boat.rect.topleft)        self.display.blit(self.buoy.surf, self.buoy)        pygame.display.flip()